version: '3.8'

services:
  # Serviço do RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=hyper_user
      - RABBITMQ_DEFAULT_PASS=hyper_password
    networks:
      - hyperativa-net

  # Serviço do Banco de Dados MySQL
  db:
    image: mysql:8.0
    platform: linux/amd64
    container_name: mysql_db
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=hyperativa_db
      - MYSQL_USER=hyper_user
      - MYSQL_PASSWORD=hyper_password
    volumes:
      - ./docker/db/init:/docker-entrypoint-initdb.d
    # Garante que o MySQL esteja pronto antes dos outros serviços iniciarem
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hyperativa-net

  # Serviço da API Principal
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: api-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/hyperativa_db?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=hyper_user
      - SPRING_DATASOURCE_PASSWORD=hyper_password
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_USERNAME=hyper_user
      - SPRING_RABBITMQ_PASSWORD=hyper_password
      - JWT_SECRET=ZDA2NDMyNDAtYzlkNS00MzY2LTg1ODEtZDc3NDQ3Y2VhMjBh
      - JWT_EXPIRATION_MS=3600000
      - ENCRYPTION_AES_SECRET-KEY=ARiaCTRO1v2rYH8lX+aBS0AoBGiZ6v3+QatdbtY49r4=
      - HYPERATIVA_RABBITMQ_QUEUE=cards.queue
      - HYPERATIVA_RABBITMQ_EXCHANGE=cards.exchange
      - HYPERATIVA_RABBITMQ_ROUTINGKEY=cards.routingkey
      - HYPERATIVA_RABBITMQ_EXCHANGE_DLX=cards.exchange.dlx
    depends_on:
      db:
        condition: service_healthy # Espera o healthcheck do DB passar
      rabbitmq:
        condition: service_started
    networks:
      - hyperativa-net

  # Serviço do Consumer de Cartões
  card-consumer:
    build:
      context: .
      dockerfile: Dockerfile
      target: consumer
    container_name: card-consumer-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/hyperativa_db?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=hyper_user
      - SPRING_DATASOURCE_PASSWORD=hyper_password
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_USERNAME=hyper_user
      - SPRING_RABBITMQ_PASSWORD=hyper_password
      - ENCRYPTION_AES_SECRET-KEY=KVQcNxRLaSI0LmvtgXx5AH+9VOIARMMk3o34QLSSFNE=
      - HYPERATIVA_RABBITMQ_QUEUE=cards.queue
      - HYPERATIVA_RABBITMQ_DLQ=cards.queue.dlq
      - HYPERATIVA_RABBITMQ_EXCHANGE_DLX=cards.exchange.dlx
      - HYPERATIVA_RABBITMQ_EXCHANGE=cards.exchange
      - HYPERATIVA_RABBITMQ_ROUTINGKEY=cards.routingkey
    depends_on:
      db:
        condition: service_healthy # Espera o healthcheck do DB passar
      rabbitmq:
        condition: service_started
    networks:
      - hyperativa-net

networks:
  hyperativa-net:
    driver: bridge
